syntax = "proto3";

package org.axe.platform.dapi.v0;

service Core {
  rpc getStatus (GetStatusRequest) returns (GetStatusResponse);
  rpc getBlock (GetBlockRequest) returns (GetBlockResponse);
  rpc broadcastTransaction (BroadcastTransactionRequest) returns (BroadcastTransactionResponse);
  rpc getTransaction (GetTransactionRequest) returns (GetTransactionResponse);
  rpc getEstimatedTransactionFee (GetEstimatedTransactionFeeRequest) returns (GetEstimatedTransactionFeeResponse);
  rpc subscribeToBlockHeadersWithChainLocks (BlockHeadersWithChainLocksRequest) returns (stream BlockHeadersWithChainLocksResponse);
  rpc subscribeToTransactionsWithProofs (TransactionsWithProofsRequest) returns (stream TransactionsWithProofsResponse);
}

message GetStatusRequest {

}

message GetStatusResponse {
  uint32 core_version = 1;
  uint32 protocol_version = 2;
  uint32 blocks = 3;
  uint32 time_offset = 4;
  uint32 connections = 5;
  string proxy = 6;
  double difficulty = 7;
  bool testnet = 8;
  double relay_fee = 9;
  string errors = 10;
  string network = 11;
}

message GetBlockRequest {
  oneof block {
    uint32 height = 1;
    string hash = 2;
  }
}

message GetBlockResponse {
  bytes block = 1;
}

message BroadcastTransactionRequest {
  bytes transaction = 1;
  bool allow_high_fees = 2;
  bool bypass_limits = 3;
}

message BroadcastTransactionResponse {
  string transaction_id = 1;
}

message GetTransactionRequest {
  string id = 1;
}

message GetTransactionResponse {
  bytes transaction = 1;
}

message BlockHeadersWithChainLocksRequest {
  oneof from_block {
    bytes from_block_hash = 1;
    uint32 from_block_height = 2;
  }

  uint32 count = 3;
}

message BlockHeadersWithChainLocksResponse {
  oneof responses {
    BlockHeaders block_headers = 1;
    ChainLockSignatureMessages chain_lock_signature_messages = 2;
  }
}

message BlockHeaders {
  repeated bytes headers = 1;
}

message ChainLockSignatureMessages {
  repeated bytes messages = 1;
}

message GetEstimatedTransactionFeeRequest {
  uint32 blocks = 1;
}

message GetEstimatedTransactionFeeResponse {
  double fee = 1;
}

message TransactionsWithProofsRequest {
  BloomFilter bloom_filter = 1;

  oneof from_block {
    bytes from_block_hash = 2;
    uint32 from_block_height = 3;
  }

  uint32 count = 4;

  bool send_transaction_hashes = 5;
}

message BloomFilter {
  bytes v_data = 1;
  uint32 n_hash_funcs = 2;
  uint32 n_tweak = 3;
  uint32 n_flags = 4;
}

message TransactionsWithProofsResponse {
  oneof responses {
    RawTransactions raw_transactions = 1;
    InstantSendLockMessages instant_send_lock_messages = 2;
    bytes raw_merkle_block = 3;
  }
}

message RawTransactions {
  repeated bytes transactions = 1;
}

message InstantSendLockMessages {
  repeated bytes messages = 1;
}
